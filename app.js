// Assisted by watsonx Code Assistant
// Code generated by WCA@IBM in this programming language is not approved for use in IBM product development.

const express = require('express');
const bodyParser = require('body-parser');
const moment = require('moment');

const app = express();
const port = process.env.PORT || 3000;

// Set view engine to EJS
app.set('view engine', 'ejs');
app.set('views', './views');

// Middleware
app.use(bodyParser.urlencoded({ extended: false }));

// Route to display random number
app.get('/', (req, res) => {
  const randomNumber = Math.floor(100000 + Math.random() * 900000); // Generates a 6-digit random number
  res.render('index', { number: randomNumber });
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

const fs = require('fs');

// Verifique se o arquivo de log existe, caso contrário, crie-o
if (!fs.existsSync('log.txt')) {
  fs.writeFileSync('log.txt', '');
}

// Adicione o conteúdo do formulário ao arquivo de log
app.post('/submit-inscription', (req, res) => {
  const { nome, email, profissao, areaInteresse } = req.body;  
  const logEntry = `${nome};${email};${profissao};${areaInteresse};${moment().format('YYYY-MM-DD HH:mm:ss')};\n`;

  fs.appendFile('log.txt', logEntry, (err) => {
    if (err) {
      console.error('Erro ao escrever no arquivo de log:', err);
      res.status(500).send('Erro ao processar sua inscrição.');
    } else {
      res.send('Inscrição recebida com sucesso!');
    }
  });
});